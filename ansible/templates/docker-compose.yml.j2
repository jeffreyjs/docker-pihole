# {{ ansible_managed }}
---
x-common: &common-settings
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
  platform: linux/{{ arch }}
  pull_policy: {{ compose_pull_policy |default('missing') }}
  restart: unless-stopped
x-network: &default-networks
  networks:
    - dns
name: {{ compose_project_name }}
networks:
  dns:
    name: dns
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
{% if docker_network.enable_ipv6 %}
      com.docker.network.enable_ipv6: "true"
{% endif %}
    ipam:
      config:
        - subnet: {{ docker_network.subnet.ipv4 }}
{% if docker_network.enable_ipv6 %}
        - subnet: {{ docker_network.subnet.ipv6 }}
{% endif %}
services:
  cfssl:
    container_name: cfssl
    command: serve -address=0.0.0.0 -config=/etc/cfssl/config/config.json
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8888 || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    image: cfssl/cfssl:${TAG_CFSSL:-latest}
    <<: [*common-settings, *default-networks]
    volumes:
      - {{ compose_directory }}/etc/cfssl:/etc/cfssl:rw
    working_dir: /etc/cfssl
  cloudflared:
    container_name: cloudflared
    command: proxy-dns
    environment:
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: "53"
      TUNNEL_DNS_UPSTREAM: >-
        {{
          upstream_dns
          | map('regex_replace',
          '^(.*)$', 'https://\\1/dns-query')
          | join(',')
        }}
    expose:
      - 53
    # TODO: Add better healthcheck
    healthcheck:
      test: ["CMD", "cloudflared", "version"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    hostname: cloudflared
    image: cloudflare/cloudflared:${TAG_CLOUDFLARED:-latest}
    networks:
      dns:
        ipv4_address: {{ docker_network.cloudflared.ipv4 }}
    <<: *common-settings
  pihole:
    container_name: pihole
    depends_on:
      cloudflared:
        condition: service_healthy
      traefik:
        condition: service_healthy
    dns:
      - 127.0.0.1
      - {{ docker_network.cloudflared.ipv4 }}
      - {{ upstream_dns[0] }}
    environment:
{% for key, value in pihole_env.items() %}
      {{ key }}: {{ value }}
{% endfor %}
    healthcheck:
      test: ["CMD-SHELL", "dig @127.0.0.1 pi.hole || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    hostname: pihole
    image: pihole/pihole:${TAG_PIHOLE:-latest}
    labels:
      traefik.enable: true
      traefik.http.middlewares.pihole-redirectregex.redirectregex.regex: /admin
      traefik.http.middlewares.pihole-redirectregex.redirectregex.replacement: /
      traefik.http.middlewares.pihole-web.addprefix.prefix: /admin
      traefik.http.middlewares.adminprefix.addprefix.prefix: /admin
      traefik.http.routers.pihole-web.entrypoints: web-secure
      traefik.http.routers.pihole-web.service: pihole-web
      traefik.http.routers.pihole-web.middlewares: adminprefix
{# NOTE: This is not required unless a different host from the service is defined #}
      traefik.http.routers.pihole-web.rule: Host(`pihole.{{ domain }}`)
      traefik.http.services.pihole-web.loadbalancer.server.port: 80
{% if traefik.use_letsencrypt %}
      traefik.http.routers.pihole-web.tls.certresolver: resolver
{% endif %}
{% if pihole.ssl %}
      traefik.tcp.routers.pihole-web-tcp.tls: true
{% endif %}
{% if pihole.external_dns %}
      traefik.tcp.routers.pihole-tcp.entrypoints: dns-tcp
      traefik.tcp.routers.pihole-tcp.rule: HostSNI(`*`)
      traefik.tcp.routers.pihole-tcp.service: pihole-tcp
      traefik.tcp.services.pihole-tcp.loadbalancer.server.port: 53
      traefik.udp.routers.pihole-udp.entrypoints: dns-udp
      traefik.udp.routers.pihole-udp.service: pihole-udp
      traefik.udp.services.pihole-udp.loadbalancer.server.port: 53
{% endif %}
    networks:
      dns:
        ipv4_address: {{ docker_network.pihole.ipv4 }}
    <<: *common-settings
    volumes:
      - {{ compose_directory }}/pihole/volume:/etc/pihole:rw
  traefik:
    container_name: traefik
    environment:
      DOMAIN: ${DOMAIN:-local}
{% if traefik.use_letsencrypt %}
      EMAIL: ${EMAIL}
{% endif %}
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    image: traefik:${TAG_TRAEFIK:-latest}
    labels:
      traefik.enable: {{ traefik.enable_dashboard | bool }}
      traefik.http.routers.traefik.entrypoints: web-secure
      traefik.http.routers.traefik.service: api@internal
{% if traefik.use_letsencrypt %}
      traefik.http.routers.traefik.tls.certresolver: resolver
{% endif %}
{% if traefik.enable_htpasswd %}
      traefik.http.middlewares.traefik-auth.basicauth.usersfile: /etc/traefik/usersfile
      traefik.http.routers.traefik-auth.middlewares: dashboard
{% endif %} 
    <<: [*common-settings, *default-networks]
    security_opt:
      - no-new-privileges:true
    stdin_open: true
    tty: true
    ports:
{% if pihole.external_dns %}
      - mode: host
        published: 53
        protocol: tcp
        target: 53
      - mode: host
        published: 53
        protocol: udp
        target: 53
{% endif %}
      - mode: host
        published: 80
        protocol: tcp
        target: 80
      - mode: host
        published: 443
        protocol: tcp
        target: 443
{% if wireguard.enabled %}
      - mode: host
        published: {{ docker_network.wireguard.port }}
        protocol: udp
        target: {{ docker_network.wireguard.port }}
{% endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - {{ compose_directory }}/etc/cfssl:/etc/cfssl:rw
      - {{ compose_directory }}/traefik/config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - {{ compose_directory }}/traefik/config/certs-traefik.yaml:/etc/traefik/dynamic/certs-traefik.yaml:ro
{% if wireguard.enabled %}
  wireguard:
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    depends_on:
      traefik:
        condition: service_healthy
    environment:
      PUID: "1000"
      PGID: "1000"
      TZ: "{{ compose_timezone | default('Etc/UTC') }}"
      SERVERURL: "auto"
      SERVERPORT: "{{ docker_network.wireguard.port }}"
      ALLOWEDIPS: "0.0.0.0/0,::/0"
      PEERS: "10"
      PEERDNS: "{{ docker_network.pihole.ipv4 }}"
      INTERNAL_SUBNET: "{{ docker_network.wireguard.subnet.ipv4 }}"
    image: linuxserver/wireguard:${TAG_WIREGUARD:-latest}
    labels:
      traefik.enable: {{ wireguard.enabled | bool }}
      traefik.udp.routers.wireguard-udp.entrypoints: wg-udp
      traefik.udp.routers.wireguard-udp.service: wireguard-udp
      traefik.udp.services.wireguard-udp.loadbalancer.server.port: {{ docker_network.wireguard.port }}
    <<: [*common-settings, *default-networks]
    sysctls:
      net.ipv4.conf.all.src_valid_mark: 1
      net.ipv4.ip_forward: 1
{% if docker_network.enable_ipv6 %}
      net.ipv6.conf.all.disable_ipv6: 0
      net.ipv6.conf.all.forwarding: 1
      net.ipv6.conf.eth0.proxy_ndp: 1
{% endif %}
    volumes:
      - {{ compose_directory }}/wireguard:/config:rw
      - /lib/modules:/lib/modules
{% endif %}
